import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
import requests
from bs4 import BeautifulSoup

# Telegram Bot Token
import os
API_TOKEN = os.getenv("API_TOKEN")

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Function to fetch and parse information about a housing complex
def fetch_housing_info(query):
    try:
        base_url = "https://ap-r.ru"
        visited_urls = set()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–∂–µ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        results = []

        def crawl_page(url):
            if url in visited_urls or len(visited_urls) > 100:  # –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                return
            visited_urls.add(url)
            response = requests.get(url)
            response.raise_for_status()

            soup = BeautifulSoup(response.text, 'html.parser')

            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ñ–ö
            complexes = soup.find_all('div', class_='complex-card')  # –ù–∞—Å—Ç—Ä–æ–π –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞
            for complex_card in complexes:
                title = complex_card.find('h2').get_text(strip=True)
                if query.lower() in title.lower():
                    link = complex_card.find('a')['href']
                    results.append(f"üè¢ {title}\nüîó {base_url}{link}")

            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for link in soup.find_all('a', href=True):
                absolute_link = requests.compat.urljoin(base_url, link['href'])
                if base_url in absolute_link and absolute_link not in visited_urls:
                    crawl_page(absolute_link)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        crawl_page(base_url)

        if not results:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        return "\n\n".join(results[:5])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ 5 –ñ–ö

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

# Command /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

# Handling user queries
@dp.message_handler()
async def search_housing(message: Message):
    query = message.text.strip()
    await message.reply("–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    info = fetch_housing_info(query)
    await message.reply(info)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
